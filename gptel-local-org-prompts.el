;;; gptel-local-org-prompts.el --- Local org prompt selector for gptel -*- lexical-binding: t; -*-

;; Author: Generated by ECA
;; Version: 0.1
;; Keywords: convenience, tools, org, gptel

;;; Commentary:
;;
;; Provides a command to select an org file as a gptel system prompt from a user-configured directory.
;; Each org file's content is a prompt option, displayed as relative path + preview (first N characters).
;;
;; Usage:
;;   (require 'gptel-local-org-prompts)
;;   M-x gptel-choose-org-prompt
;;
;;; Code:

(require 'cl-lib)
(require 'gptel)
(require 'gptel-transient)

(defgroup gptel-local-org-prompts nil
  "Local org file prompts integration for gptel."
  :group 'gptel)

(defcustom gptel-local-org-prompts-directory (expand-file-name "gptel-local-org-prompts/" user-emacs-directory)
  "Root directory to search recursively for .org prompt files."
  :type 'directory
  :group 'gptel-local-org-prompts)

(defcustom gptel-local-org-prompts-preview-length 50
  "Preview length (characters) to display in prompt selection."
  :type 'integer
  :group 'gptel-local-org-prompts)

(defun gptel-local-org-prompts--collect-candidates ()
  "Return an alist of (label . full-content) for all .org files recursively."
  (let* ((files (directory-files-recursively
                 gptel-local-org-prompts-directory
                 "\\.org\\'"))
         (root (file-name-as-directory (expand-file-name gptel-local-org-prompts-directory))))
    (cl-loop for f in files
             for rel = (file-relative-name f root)
             for content = (with-temp-buffer
                             (insert-file-contents f)
                             (buffer-string))
             for preview = (truncate-string-to-width
                            (replace-regexp-in-string "\n" " " content)
                            gptel-local-org-prompts-preview-length nil nil t)
             collect (cons (concat rel ": " preview) content))))

;;;###autoload
(defun gptel-choose-org-prompt ()
  "Interactively select a local org file's contents as the gptel system prompt."
  (interactive)
  (let* ((candidates (gptel-local-org-prompts--collect-candidates))
         (label (completing-read "Choose org prompt: " (mapcar #'car candidates) nil t)))
    (when-let ((content (cdr (assoc label candidates))))
      (gptel--set-with-scope 'gptel--system-message content gptel--set-buffer-locally)
      (gptel--edit-directive 'gptel--system-message
        :initial content
        :callback (lambda (&rest _) (message "System prompt updated!"))))))

(provide 'gptel-local-org-prompts)
;;; gptel-local-org-prompts.el ends here
